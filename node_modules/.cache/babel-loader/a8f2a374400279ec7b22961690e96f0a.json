{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dell\\\\Documents\\\\Asi\\\\tic-toe-app\\\\src\\\\index.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport ResetButton from './ResetButton';\nimport Board from './Board';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Game extends React.Component {\n  //Main game component\n  constructor(props) {\n    super(props);\n    this.state = {\n      frames: [{\n        squares: Array(9).fill(null),\n        //Default array of size 9\n        changed: -1 //Square index that was changed\n\n      }],\n      index: 0,\n      size: 3,\n      //The size of the board\n      current: \"X\",\n      running: true,\n      twoplayer: true //Whether the game is two player or player-AI\n\n    };\n  }\n\n  renderResetButton() {\n    //Return the rendered reset button\n    return /*#__PURE__*/_jsxDEV(ResetButton, {\n      onClick: () => {\n        this.resetGame(this.state.size);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 12\n    }, this);\n  }\n\n  renderBoardSize() {\n    //Return the rendered board size incrementer/decrementer\n    return /*#__PURE__*/_jsxDEV(BoardSizeButton, {\n      onClick: inc => {\n        this.changeBoardSize(inc);\n      },\n      size: this.state.size\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n\n  renderBoard(frame) {\n    //Return a rendered board\n    return /*#__PURE__*/_jsxDEV(Board, {\n      squares: frame,\n      size: this.state.size,\n      disabled: !this.state.running,\n      onClick: i => {\n        if (this.state.running) this.clickHandler(i);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this);\n  }\n\n  renderHistory() {\n    //Render the history board frames into a list of buttons\n    let filtered = this.state.frames.slice().filter((_, i) => i > 1); //\n\n    return filtered.map((board, i) => {\n      i = i + 1;\n      return /*#__PURE__*/_jsxDEV(\"li\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => {\n            this.changeFrame(i);\n          },\n          children: \"Jump to move \" + i + \" (\" + (this.state.frames[i].move % 3 + 1) + \",\" + Math.floor(this.state.frames[i].move / 3 + 1) + \")\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 13\n        }, this)\n      }, i, false, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 11\n      }, this);\n    });\n  }\n\n  toggleAI() {\n    //Toggle AI/two player mode\\\n    if (this.state.twoplayer) {\n      if (this.state.current === \"O\") {\n        //AI's move - trigger click with null value\n        this.aiMove();\n      }\n    }\n\n    this.setState({\n      twoplayer: !this.state.twoplayer\n    });\n  }\n\n  resetGame(size) {\n    //Reset the game state to default, clearing all history, and set the board size\n    this.setState({\n      frames: [{\n        squares: Array(size * size).fill(null)\n      }],\n      current: \"X\",\n      index: 0,\n      //Current index in the frames\n      size: size,\n      running: true,\n      //Allows moves\n      game_won: false //Determines whether to show game over features\n\n    });\n  }\n\n  changeFrame(index) {\n    //Change the current frame to go back in time\n    this.setState({\n      index: index,\n      current: index % 2 === 0 ? \"X\" : \"O\"\n    });\n\n    if (index < this.state.frames.length - 1) {\n      //If we're not at the end yet, allow changes\n      this.setState({\n        running: false,\n        game_won: false\n      });\n    } else {\n      this.setState({\n        running: false,\n        game_won: true\n      });\n    }\n  }\n\n  changeBoardSize(inc) {\n    if (this.state.frames.length <= 1) {\n      //Check that we are at a new game before setting size\n      this.resetGame(this.state.size + inc);\n    }\n  }\n\n  getMove() {\n    let board = this.state.frames[this.state.index].squares.slice(); //Get a copy of the squares array\n\n    let slots = this.getAvailableSquares(this.state.frames[this.state.index].squares);\n    let choice = -1; //Final choice (index in array)\n\n    let best = -1000; //Arbitrary value for best move\n\n    for (let move of slots) {\n      //Iterate through the choices\n      board[move] = \"O\";\n      let v = this.minimax(board, true, -1000, 1000);\n\n      if (v > best) {\n        //If it's better, change the best\n        best = v;\n        choice = move;\n      }\n\n      board[move] = null;\n    }\n\n    return choice;\n  }\n\n  minimax(board, turn, alpha, beta) {\n    let score = this.gameOverCheck(board, false); //Get the score\n\n    if (!this.isFull(board) && score === null) {\n      //Board not complete - recursive case\n      let best = turn ? 1000 : -1000;\n      let a = alpha;\n      let b = beta;\n      let slots = this.getAvailableSquares(board);\n\n      for (let move of slots) {\n        //Iterate over set of possible choices\n        board[move] = turn ? \"X\" : \"O\";\n        let r = this.minimax(board, !turn, a, b);\n        board[move] = null;\n\n        if (turn) {\n          //The user's turn - minimize the loss\n          best = Math.min(best, r);\n          b = Math.min(b, best);\n\n          if (b <= a) {\n            board[move] = null;\n            break;\n          }\n        } else {\n          //The AI's turn - maximize the win\n          best = Math.max(best, r);\n          a = Math.max(a, best);\n\n          if (b <= a) {\n            board[move] = null;\n            break;\n          }\n        }\n      }\n\n      return best;\n    } else {\n      //Base case\n      if (score === \"X\") {\n        //User won - worst outcome\n        return -1;\n      } else if (score === \"O\") {\n        //AI won - return positive tScore\n        return 1;\n      } else if (score === \"\") {\n        //Tie\n        return 0;\n      }\n    }\n  }\n\n  getAvailableSquares(board) {\n    //Return the available squares\n    let res = [];\n    let squares = board;\n\n    for (let i = 0; i < squares.length; i++) {\n      if (squares[i] == null) {\n        res.push(i);\n      }\n    }\n\n    return res;\n  }\n\n  isFull(board) {\n    return this.getAvailableSquares(board).length === 0;\n  }\n\n  clickHandler(i) {\n    //Handle clicks on the board squares and update game state\n    if (this.state.frames[this.state.index].squares[i] == null) {\n      //Only allow clicks if running and the square isn't set (or -1 for special cases)\n      if (this.state.twoplayer) {\n        //Two player mode\n        this.setSquare(i);\n        this.setState({\n          current: this.state.current === \"X\" ? \"O\" : \"X\"\n        }); //Prevent other player from making a move\n      } else {\n        //AI mode\n        this.setSquare(i);\n        this.aiMove();\n      }\n    }\n  }\n\n  async setSquare(i) {\n    //Set the square at i to the current player\n    if (this.state.running !== false) {\n      const boards = this.state.frames.slice(0, this.state.index + 1); //Get a copy of the array (up to index+1 so that can alter history)\n\n      const squares = boards[this.state.index].squares.slice();\n\n      if (squares[i] == null) {\n        //Prevent altering already set squares\n        squares[i] = this.state.current;\n        boards.push({\n          squares: squares,\n          move: i\n        });\n        await this.setState({\n          frames: boards,\n          index: this.state.index + 1\n        }, () => {\n          this.gameOverCheck(this.state.frames[this.state.index].squares, true);\n        });\n      }\n    }\n  }\n\n  aiMove() {\n    if (this.state.running) {\n      //Only run if the game isn't over\n      this.setState({\n        current: \"O\",\n        running: undefined\n      }); //Prevent other player from making a move\n\n      window.setTimeout(() => {\n        //Delay to give a sense of thinking\n        if (this.state.running !== false) {\n          let move = this.getMove();\n          this.setSquare(move);\n\n          if (!this.gameOverCheck(this.state.frames[this.state.index].squares, true)) {\n            this.setState({\n              running: true,\n              current: \"X\"\n            });\n          }\n        }\n      }, 350);\n    }\n  }\n\n  gameOverCheck(board, actual) {\n    //Determines if the game is over and changes the state (actual is true if changing the state and returning boolean, false for returning winner)\n    let sq = board;\n\n    for (let i = 0; i < this.state.size * this.state.size - 1; i += this.state.size) {\n      //Horizontal - rows\n      let curr = sq[i];\n\n      if (curr !== null) {\n        for (let j = 1; j < this.state.size; j++) {\n          if (sq[i + j] !== curr) {\n            curr = null;\n            break;\n          }\n        }\n\n        if (curr !== null) {\n          if (actual) {\n            this.setState({\n              current: curr,\n              running: false,\n              game_won: true\n            });\n            return true;\n          } else {\n            return curr;\n          }\n        }\n      }\n    }\n    /* Vertical - columns */\n\n\n    for (let i = 0; i < this.state.size; i++) {\n      let curr = sq[i];\n\n      if (curr !== null) {\n        for (let j = 1; j < this.state.size; j += 1) {\n          if (sq[i + j * this.state.size] !== curr) {\n            curr = null;\n            break;\n          }\n        }\n\n        if (curr !== null) {\n          if (actual) {\n            this.setState({\n              current: curr,\n              running: false,\n              game_won: true\n            });\n            return true;\n          } else {\n            return curr;\n          }\n        }\n      }\n    } //Left-slanting diagonal\n\n\n    let curr = sq[0];\n\n    if (curr !== null) {\n      for (let i = 0; i < this.state.size * this.state.size; i += this.state.size + 1) {\n        if (sq[i] !== curr) {\n          curr = null;\n          break;\n        }\n      }\n\n      if (curr !== null) {\n        if (actual) {\n          this.setState({\n            current: curr,\n            running: false,\n            game_won: true\n          });\n          return true;\n        } else {\n          return curr;\n        }\n      }\n    } //Right-slanting diagonal\n\n\n    curr = sq[this.state.size - 1];\n\n    if (curr !== null) {\n      for (let i = this.state.size - 1; i < this.state.size * this.state.size - 1; i += this.state.size - 1) {\n        if (sq[i] !== curr) {\n          curr = null;\n          break;\n        }\n      }\n\n      if (curr !== null) {\n        if (actual) {\n          this.setState({\n            current: curr,\n            running: false,\n            game_won: true\n          });\n          return true;\n        } else {\n          return curr;\n        }\n      }\n    }\n\n    let tie = true; //If there is no winner yet, check for a tie\n\n    for (var k = 0; k <= 8; k++) {\n      if (sq[k] == null) {\n        tie = false;\n        break;\n      }\n    }\n\n    if (tie) {\n      if (actual) {\n        this.setState({\n          current: \"\",\n          running: false,\n          game_won: true\n        });\n        return true;\n      } else {\n        return \"\";\n      }\n    }\n\n    if (actual) {\n      return false;\n    } else {\n      return null;\n    }\n  }\n\n  render() {\n    //Main render function\n    let msg = \"\";\n\n    if (this.state.running === false && this.state.game_won === true) {\n      if (this.state.current !== \"\") {\n        msg = /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Winner: \", this.state.current]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 15\n        }, this);\n      } else {\n        msg = /*#__PURE__*/_jsxDEV(\"h2\", {\n          children: \"Game tied!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 15\n        }, this);\n      }\n    } else {\n      msg = /*#__PURE__*/_jsxDEV(\"h4\", {\n        children: [\"Next player: \", this.state.current]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 13\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row mt-5\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-9\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"text-center\",\n          children: \"Tic Tac Toe\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-center my-3\",\n          children: msg\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 327,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row justify-content-center\",\n          children: this.renderBoard(this.state.frames[this.state.index].squares)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 330,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 325,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"col-md-3\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pt-4 row text-center\",\n          children: /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-center\",\n            children: this.renderBoardSize()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 336,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"pt-4 row text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: \"toggle-main\",\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              name: \"toggle\",\n              id: \"toggle-ai\",\n              onChange: () => this.toggleAI()\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 342,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n              className: \"toggle-padding\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-center\",\n            children: /*#__PURE__*/_jsxDEV(\"label\", {\n              htmlFor: \"toggle-ai\",\n              children: \"Enable AI\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 345,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"row text-center\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-center\",\n            children: \"History\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            children: [/*#__PURE__*/_jsxDEV(\"li\", {\n              children: this.renderResetButton()\n            }, \"-1\", false, {\n              fileName: _jsxFileName,\n              lineNumber: 352,\n              columnNumber: 15\n            }, this), this.renderHistory()]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 351,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 349,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 324,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 364,\n  columnNumber: 17\n}, this), document.getElementById(\"root\"));","map":{"version":3,"names":["React","ReactDOM","ResetButton","Board","Game","Component","constructor","props","state","frames","squares","Array","fill","changed","index","size","current","running","twoplayer","renderResetButton","resetGame","renderBoardSize","inc","changeBoardSize","renderBoard","frame","i","clickHandler","renderHistory","filtered","slice","filter","_","map","board","changeFrame","move","Math","floor","toggleAI","aiMove","setState","game_won","length","getMove","slots","getAvailableSquares","choice","best","v","minimax","turn","alpha","beta","score","gameOverCheck","isFull","a","b","r","min","max","res","push","setSquare","boards","undefined","window","setTimeout","actual","sq","curr","j","tie","k","render","msg","document","getElementById"],"sources":["C:/Users/Dell/Documents/Asi/tic-toe-app/src/index.js"],"sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ResetButton from './ResetButton';\nimport Board from './Board';\nimport './index.css';\n\n\nclass Game extends React.Component { //Main game component\n  constructor(props) {\n    super(props);\n    this.state = {\n      frames: [\n        {\n          squares: Array(9).fill(null), //Default array of size 9\n          changed: -1, //Square index that was changed\n        }\n      ],\n      index: 0,\n      size: 3, //The size of the board\n      current: \"X\",\n      running: true,\n      twoplayer: true //Whether the game is two player or player-AI\n    }\n  }\n\n  renderResetButton() { //Return the rendered reset button\n    return <ResetButton onClick={() => { this.resetGame(this.state.size) }} />;\n  }\n\n  renderBoardSize() { //Return the rendered board size incrementer/decrementer\n    return <BoardSizeButton onClick={(inc) => { this.changeBoardSize(inc) }} size={this.state.size} />\n  }\n\n  renderBoard(frame) { //Return a rendered board\n    return (\n      <Board squares={ frame } size={ this.state.size } disabled={ !this.state.running } onClick={(i) => { if (this.state.running) this.clickHandler(i); }} />\n    );\n  }\n\n  renderHistory() { //Render the history board frames into a list of buttons\n    let filtered = this.state.frames.slice().filter((_,i) =>  i > 1 ); //\n    return (filtered.map(\n      (board, i) => {\n        i = i + 1;\n        return (\n          <li key={i}>\n            <button onClick={() => { this.changeFrame(i) }}>\n              {\n                \"Jump to move \" + (i) + \" (\" + (this.state.frames[i].move%3+1) +\n                  \",\" + Math.floor(this.state.frames[i].move/3+1) + \")\"\n              }\n            </button>\n          </li>\n        )\n      }));\n  }\n\n  toggleAI() { //Toggle AI/two player mode\\\n    if (this.state.twoplayer) {\n      if (this.state.current === \"O\") { //AI's move - trigger click with null value\n        this.aiMove();\n      }\n    }\n    this.setState({ twoplayer: !this.state.twoplayer });\n  }\n\n  resetGame(size) { //Reset the game state to default, clearing all history, and set the board size\n    this.setState({\n      frames: [\n        { squares: Array(size*size).fill(null) }\n      ],\n      current: \"X\",\n      index: 0, //Current index in the frames\n      size: size,\n      running: true, //Allows moves\n      game_won: false //Determines whether to show game over features\n    });\n  }\n\n  changeFrame(index) { //Change the current frame to go back in time\n    this.setState({ index: index, current: index%2===0 ? \"X\" : \"O\" });\n    if (index < this.state.frames.length-1) { //If we're not at the end yet, allow changes\n      this.setState({ running: false, game_won: false });\n    } else {\n      this.setState({ running: false, game_won: true });\n    }\n  }\n\n  changeBoardSize(inc) {\n    if (this.state.frames.length <= 1) { //Check that we are at a new game before setting size\n      this.resetGame( this.state.size + inc );\n    }\n  }\n\n  getMove() {\n    let board = this.state.frames[this.state.index].squares.slice(); //Get a copy of the squares array\n    let slots = this.getAvailableSquares(this.state.frames[this.state.index].squares);\n    let choice = -1; //Final choice (index in array)\n    let best = -1000; //Arbitrary value for best move\n    for (let move of slots) { //Iterate through the choices\n      board[move] = \"O\";\n      let v = this.minimax(board, true, -1000, 1000);\n      if (v > best) { //If it's better, change the best\n        best = v;\n        choice = move;\n      }\n      board[move] = null;\n    }\n    return choice;\n  }\n\n  minimax(board, turn, alpha, beta) {\n    let score = this.gameOverCheck(board, false); //Get the score\n    if ((!this.isFull(board)) && (score === null)) { //Board not complete - recursive case\n      let best = (turn ? 1000 : -1000);\n      let a = alpha;\n      let b = beta;\n      let slots = this.getAvailableSquares(board);\n      for (let move of slots) { //Iterate over set of possible choices\n          board[move] = turn ? \"X\" : \"O\";\n          let r = this.minimax(board, !turn, a, b);\n          board[move] = null;\n          if (turn) { //The user's turn - minimize the loss\n              best = Math.min(best, r);\n              b = Math.min(b, best);\n              if (b <= a) {\n                  board[move] = null;\n                  break;\n              }\n          } else { //The AI's turn - maximize the win\n              best = Math.max(best, r);\n              a = Math.max(a, best);\n              if (b <= a) {\n                  board[move] = null;\n                  break;\n              }\n          }\n        }\n        return best;\n    } else { //Base case\n      if (score === \"X\") { //User won - worst outcome\n        return -1;\n      } else if (score === \"O\") { //AI won - return positive tScore\n        return 1;\n      } else if (score === \"\") { //Tie\n        return 0;\n      }\n    }\n  }\n\n  getAvailableSquares(board) { //Return the available squares\n    let res = [];\n    let squares = board;\n    for (let i=0; i<squares.length; i++) {\n      if (squares[i] == null) {\n        res.push(i);\n      }\n    }\n    return res;\n  }\n\n  isFull(board) {\n    return this.getAvailableSquares(board).length === 0;\n  }\n\n  clickHandler(i) { //Handle clicks on the board squares and update game state\n    if (this.state.frames[this.state.index].squares[i] == null) { //Only allow clicks if running and the square isn't set (or -1 for special cases)\n      if (this.state.twoplayer) { //Two player mode\n        this.setSquare(i);\n        this.setState({ current: (this.state.current === \"X\") ? \"O\" : \"X\" }); //Prevent other player from making a move\n      } else { //AI mode\n        this.setSquare(i);\n        this.aiMove();\n      }\n    }\n  }\n\n  async setSquare(i) { //Set the square at i to the current player\n    if (this.state.running !== false) {\n      const boards = this.state.frames.slice(0, this.state.index+1); //Get a copy of the array (up to index+1 so that can alter history)\n      const squares = boards[this.state.index].squares.slice();\n      if (squares[i] == null) { //Prevent altering already set squares\n        squares[i] = this.state.current;\n        boards.push({ squares: squares, move: i });\n        await this.setState({ frames: boards, index: this.state.index+1 }, () => {\n           this.gameOverCheck(this.state.frames[this.state.index].squares, true);\n         });\n      }\n    }\n  }\n\n  aiMove() {\n    if (this.state.running) { //Only run if the game isn't over\n      this.setState({ current: \"O\", running: undefined }); //Prevent other player from making a move\n      window.setTimeout(() => { //Delay to give a sense of thinking\n        if (this.state.running !== false) {\n          let move = this.getMove();\n          this.setSquare(move);\n          if (!this.gameOverCheck(this.state.frames[this.state.index].squares, true)) {\n            this.setState({ running: true, current: \"X\" });\n          }\n        }\n      }, 350);\n    }\n  }\n\n  gameOverCheck(board, actual) { //Determines if the game is over and changes the state (actual is true if changing the state and returning boolean, false for returning winner)\n    let sq = board;\n\n    for (let i=0; i<this.state.size*this.state.size-1; i+=this.state.size) { //Horizontal - rows\n      let curr = sq[i];\n      if (curr !== null) {\n        for (let j=1; j<this.state.size; j++) {\n          if (sq[i+j] !== curr) {\n            curr = null;\n            break;\n          }\n        }\n        if (curr !== null) {\n          if (actual) {\n            this.setState({ current: curr, running: false, game_won: true });\n            return true;\n          } else {\n            return curr;\n          }\n        }\n      }\n    }\n     /* Vertical - columns */\n    for (let i=0; i<this.state.size; i++) { \n      let curr = sq[i];\n      if (curr !== null) {\n        for (let j=1; j<this.state.size; j+=1) {\n          if (sq[i+(j*this.state.size)] !== curr) {\n            curr = null;\n            break;\n          }\n        }\n        if (curr !== null) {\n          if (actual) {\n            this.setState({ current: curr, running: false, game_won: true });\n            return true;\n          } else {\n            return curr;\n          }\n        }\n      }\n    }\n\n    //Left-slanting diagonal\n    let curr = sq[0];\n    if (curr !== null) {\n      for (let i=0; i<this.state.size*this.state.size; i+=this.state.size+1) {\n        if (sq[i] !== curr) {\n          curr = null;\n          break;\n        }\n      }\n      if (curr !== null) {\n        if (actual) {\n          this.setState({ current: curr, running: false, game_won: true });\n          return true;\n        } else {\n          return curr;\n        }\n      }\n    }\n\n    //Right-slanting diagonal\n    curr = sq[this.state.size-1];\n    if (curr !== null) {\n      for (let i=this.state.size-1; i<this.state.size*this.state.size-1; i+=this.state.size-1) {\n        if (sq[i] !== curr) {\n          curr = null;\n          break;\n        }\n      }\n      if (curr !== null) {\n        if (actual) {\n          this.setState({ current: curr, running: false, game_won: true });\n          return true;\n        } else {\n          return curr;\n        }\n      }\n    }\n\n    let tie = true; //If there is no winner yet, check for a tie\n    for (var k=0; k<=8; k++) {\n      if (sq[k] == null) {\n        tie = false;\n        break;\n      }\n    }\n    if (tie) {\n      if (actual) {\n        this.setState({ current: \"\", running: false, game_won: true });\n        return true;\n      } else {\n        return \"\";\n      }\n    }\n\n    if (actual) {\n      return false;\n    } else {\n      return null;\n    }\n  }\n\n  render() { //Main render function\n    let msg = \"\";\n    if (this.state.running === false && this.state.game_won === true) {\n      if (this.state.current !== \"\") {\n        msg = <h2>Winner: { this.state.current }</h2>;\n      } else {\n        msg = <h2>Game tied!</h2>;\n      }\n    } else {\n      msg = <h4>Next player: { this.state.current }</h4>;\n    }\n\n    return (\n      <div className=\"row mt-5\">\n        <div className=\"col-md-9\">\n          <h1 className=\"text-center\">Tic Tac Toe</h1>\n          <div className=\"text-center my-3\">\n            { msg }\n          </div>\n          <div className=\"row justify-content-center\">\n            { this.renderBoard(this.state.frames[this.state.index].squares) }\n          </div>\n        </div>\n        <div className=\"col-md-3\">\n          <div className=\"pt-4 row text-center\">\n            <h3 className=\"text-center\">\n              { this.renderBoardSize() }\n            </h3>\n          </div>\n          <div className=\"pt-4 row text-center\">\n            <span className=\"toggle-main\">\n              <input type=\"checkbox\" name=\"toggle\" id=\"toggle-ai\" onChange={() => this.toggleAI()} />\n              <span className=\"toggle-padding\"></span>\n            </span>\n            <h3 className=\"text-center\">\n              <label htmlFor=\"toggle-ai\">Enable AI</label>\n            </h3>\n          </div>\n          <div className=\"row text-center\">\n            <h3 className=\"text-center\">History</h3>\n            <ul>\n              <li key=\"-1\">\n                { this.renderResetButton() }\n              </li>\n              { this.renderHistory() }\n            </ul>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<Game />, document.getElementById(\"root\"));\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,OAAO,aAAP;;;AAGA,MAAMC,IAAN,SAAmBJ,KAAK,CAACK,SAAzB,CAAmC;EAAE;EACnCC,WAAW,CAACC,KAAD,EAAQ;IACjB,MAAMA,KAAN;IACA,KAAKC,KAAL,GAAa;MACXC,MAAM,EAAE,CACN;QACEC,OAAO,EAAEC,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CADX;QACgC;QAC9BC,OAAO,EAAE,CAAC,CAFZ,CAEe;;MAFf,CADM,CADG;MAOXC,KAAK,EAAE,CAPI;MAQXC,IAAI,EAAE,CARK;MAQF;MACTC,OAAO,EAAE,GATE;MAUXC,OAAO,EAAE,IAVE;MAWXC,SAAS,EAAE,IAXA,CAWK;;IAXL,CAAb;EAaD;;EAEDC,iBAAiB,GAAG;IAAE;IACpB,oBAAO,QAAC,WAAD;MAAa,OAAO,EAAE,MAAM;QAAE,KAAKC,SAAL,CAAe,KAAKZ,KAAL,CAAWO,IAA1B;MAAiC;IAA/D;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAEDM,eAAe,GAAG;IAAE;IAClB,oBAAO,QAAC,eAAD;MAAiB,OAAO,EAAGC,GAAD,IAAS;QAAE,KAAKC,eAAL,CAAqBD,GAArB;MAA2B,CAAhE;MAAkE,IAAI,EAAE,KAAKd,KAAL,CAAWO;IAAnF;MAAA;MAAA;MAAA;IAAA,QAAP;EACD;;EAEDS,WAAW,CAACC,KAAD,EAAQ;IAAE;IACnB,oBACE,QAAC,KAAD;MAAO,OAAO,EAAGA,KAAjB;MAAyB,IAAI,EAAG,KAAKjB,KAAL,CAAWO,IAA3C;MAAkD,QAAQ,EAAG,CAAC,KAAKP,KAAL,CAAWS,OAAzE;MAAmF,OAAO,EAAGS,CAAD,IAAO;QAAE,IAAI,KAAKlB,KAAL,CAAWS,OAAf,EAAwB,KAAKU,YAAL,CAAkBD,CAAlB;MAAuB;IAApJ;MAAA;MAAA;MAAA;IAAA,QADF;EAGD;;EAEDE,aAAa,GAAG;IAAE;IAChB,IAAIC,QAAQ,GAAG,KAAKrB,KAAL,CAAWC,MAAX,CAAkBqB,KAAlB,GAA0BC,MAA1B,CAAiC,CAACC,CAAD,EAAGN,CAAH,KAAUA,CAAC,GAAG,CAA/C,CAAf,CADc,CACqD;;IACnE,OAAQG,QAAQ,CAACI,GAAT,CACN,CAACC,KAAD,EAAQR,CAAR,KAAc;MACZA,CAAC,GAAGA,CAAC,GAAG,CAAR;MACA,oBACE;QAAA,uBACE;UAAQ,OAAO,EAAE,MAAM;YAAE,KAAKS,WAAL,CAAiBT,CAAjB;UAAqB,CAA9C;UAAA,UAEI,kBAAmBA,CAAnB,GAAwB,IAAxB,IAAgC,KAAKlB,KAAL,CAAWC,MAAX,CAAkBiB,CAAlB,EAAqBU,IAArB,GAA0B,CAA1B,GAA4B,CAA5D,IACE,GADF,GACQC,IAAI,CAACC,KAAL,CAAW,KAAK9B,KAAL,CAAWC,MAAX,CAAkBiB,CAAlB,EAAqBU,IAArB,GAA0B,CAA1B,GAA4B,CAAvC,CADR,GACoD;QAHxD;UAAA;UAAA;UAAA;QAAA;MADF,GAASV,CAAT;QAAA;QAAA;QAAA;MAAA,QADF;IAUD,CAbK,CAAR;EAcD;;EAEDa,QAAQ,GAAG;IAAE;IACX,IAAI,KAAK/B,KAAL,CAAWU,SAAf,EAA0B;MACxB,IAAI,KAAKV,KAAL,CAAWQ,OAAX,KAAuB,GAA3B,EAAgC;QAAE;QAChC,KAAKwB,MAAL;MACD;IACF;;IACD,KAAKC,QAAL,CAAc;MAAEvB,SAAS,EAAE,CAAC,KAAKV,KAAL,CAAWU;IAAzB,CAAd;EACD;;EAEDE,SAAS,CAACL,IAAD,EAAO;IAAE;IAChB,KAAK0B,QAAL,CAAc;MACZhC,MAAM,EAAE,CACN;QAAEC,OAAO,EAAEC,KAAK,CAACI,IAAI,GAACA,IAAN,CAAL,CAAiBH,IAAjB,CAAsB,IAAtB;MAAX,CADM,CADI;MAIZI,OAAO,EAAE,GAJG;MAKZF,KAAK,EAAE,CALK;MAKF;MACVC,IAAI,EAAEA,IANM;MAOZE,OAAO,EAAE,IAPG;MAOG;MACfyB,QAAQ,EAAE,KARE,CAQI;;IARJ,CAAd;EAUD;;EAEDP,WAAW,CAACrB,KAAD,EAAQ;IAAE;IACnB,KAAK2B,QAAL,CAAc;MAAE3B,KAAK,EAAEA,KAAT;MAAgBE,OAAO,EAAEF,KAAK,GAAC,CAAN,KAAU,CAAV,GAAc,GAAd,GAAoB;IAA7C,CAAd;;IACA,IAAIA,KAAK,GAAG,KAAKN,KAAL,CAAWC,MAAX,CAAkBkC,MAAlB,GAAyB,CAArC,EAAwC;MAAE;MACxC,KAAKF,QAAL,CAAc;QAAExB,OAAO,EAAE,KAAX;QAAkByB,QAAQ,EAAE;MAA5B,CAAd;IACD,CAFD,MAEO;MACL,KAAKD,QAAL,CAAc;QAAExB,OAAO,EAAE,KAAX;QAAkByB,QAAQ,EAAE;MAA5B,CAAd;IACD;EACF;;EAEDnB,eAAe,CAACD,GAAD,EAAM;IACnB,IAAI,KAAKd,KAAL,CAAWC,MAAX,CAAkBkC,MAAlB,IAA4B,CAAhC,EAAmC;MAAE;MACnC,KAAKvB,SAAL,CAAgB,KAAKZ,KAAL,CAAWO,IAAX,GAAkBO,GAAlC;IACD;EACF;;EAEDsB,OAAO,GAAG;IACR,IAAIV,KAAK,GAAG,KAAK1B,KAAL,CAAWC,MAAX,CAAkB,KAAKD,KAAL,CAAWM,KAA7B,EAAoCJ,OAApC,CAA4CoB,KAA5C,EAAZ,CADQ,CACyD;;IACjE,IAAIe,KAAK,GAAG,KAAKC,mBAAL,CAAyB,KAAKtC,KAAL,CAAWC,MAAX,CAAkB,KAAKD,KAAL,CAAWM,KAA7B,EAAoCJ,OAA7D,CAAZ;IACA,IAAIqC,MAAM,GAAG,CAAC,CAAd,CAHQ,CAGS;;IACjB,IAAIC,IAAI,GAAG,CAAC,IAAZ,CAJQ,CAIU;;IAClB,KAAK,IAAIZ,IAAT,IAAiBS,KAAjB,EAAwB;MAAE;MACxBX,KAAK,CAACE,IAAD,CAAL,GAAc,GAAd;MACA,IAAIa,CAAC,GAAG,KAAKC,OAAL,CAAahB,KAAb,EAAoB,IAApB,EAA0B,CAAC,IAA3B,EAAiC,IAAjC,CAAR;;MACA,IAAIe,CAAC,GAAGD,IAAR,EAAc;QAAE;QACdA,IAAI,GAAGC,CAAP;QACAF,MAAM,GAAGX,IAAT;MACD;;MACDF,KAAK,CAACE,IAAD,CAAL,GAAc,IAAd;IACD;;IACD,OAAOW,MAAP;EACD;;EAEDG,OAAO,CAAChB,KAAD,EAAQiB,IAAR,EAAcC,KAAd,EAAqBC,IAArB,EAA2B;IAChC,IAAIC,KAAK,GAAG,KAAKC,aAAL,CAAmBrB,KAAnB,EAA0B,KAA1B,CAAZ,CADgC,CACc;;IAC9C,IAAK,CAAC,KAAKsB,MAAL,CAAYtB,KAAZ,CAAF,IAA0BoB,KAAK,KAAK,IAAxC,EAA+C;MAAE;MAC/C,IAAIN,IAAI,GAAIG,IAAI,GAAG,IAAH,GAAU,CAAC,IAA3B;MACA,IAAIM,CAAC,GAAGL,KAAR;MACA,IAAIM,CAAC,GAAGL,IAAR;MACA,IAAIR,KAAK,GAAG,KAAKC,mBAAL,CAAyBZ,KAAzB,CAAZ;;MACA,KAAK,IAAIE,IAAT,IAAiBS,KAAjB,EAAwB;QAAE;QACtBX,KAAK,CAACE,IAAD,CAAL,GAAce,IAAI,GAAG,GAAH,GAAS,GAA3B;QACA,IAAIQ,CAAC,GAAG,KAAKT,OAAL,CAAahB,KAAb,EAAoB,CAACiB,IAArB,EAA2BM,CAA3B,EAA8BC,CAA9B,CAAR;QACAxB,KAAK,CAACE,IAAD,CAAL,GAAc,IAAd;;QACA,IAAIe,IAAJ,EAAU;UAAE;UACRH,IAAI,GAAGX,IAAI,CAACuB,GAAL,CAASZ,IAAT,EAAeW,CAAf,CAAP;UACAD,CAAC,GAAGrB,IAAI,CAACuB,GAAL,CAASF,CAAT,EAAYV,IAAZ,CAAJ;;UACA,IAAIU,CAAC,IAAID,CAAT,EAAY;YACRvB,KAAK,CAACE,IAAD,CAAL,GAAc,IAAd;YACA;UACH;QACJ,CAPD,MAOO;UAAE;UACLY,IAAI,GAAGX,IAAI,CAACwB,GAAL,CAASb,IAAT,EAAeW,CAAf,CAAP;UACAF,CAAC,GAAGpB,IAAI,CAACwB,GAAL,CAASJ,CAAT,EAAYT,IAAZ,CAAJ;;UACA,IAAIU,CAAC,IAAID,CAAT,EAAY;YACRvB,KAAK,CAACE,IAAD,CAAL,GAAc,IAAd;YACA;UACH;QACJ;MACF;;MACD,OAAOY,IAAP;IACH,CA1BD,MA0BO;MAAE;MACP,IAAIM,KAAK,KAAK,GAAd,EAAmB;QAAE;QACnB,OAAO,CAAC,CAAR;MACD,CAFD,MAEO,IAAIA,KAAK,KAAK,GAAd,EAAmB;QAAE;QAC1B,OAAO,CAAP;MACD,CAFM,MAEA,IAAIA,KAAK,KAAK,EAAd,EAAkB;QAAE;QACzB,OAAO,CAAP;MACD;IACF;EACF;;EAEDR,mBAAmB,CAACZ,KAAD,EAAQ;IAAE;IAC3B,IAAI4B,GAAG,GAAG,EAAV;IACA,IAAIpD,OAAO,GAAGwB,KAAd;;IACA,KAAK,IAAIR,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAChB,OAAO,CAACiC,MAAxB,EAAgCjB,CAAC,EAAjC,EAAqC;MACnC,IAAIhB,OAAO,CAACgB,CAAD,CAAP,IAAc,IAAlB,EAAwB;QACtBoC,GAAG,CAACC,IAAJ,CAASrC,CAAT;MACD;IACF;;IACD,OAAOoC,GAAP;EACD;;EAEDN,MAAM,CAACtB,KAAD,EAAQ;IACZ,OAAO,KAAKY,mBAAL,CAAyBZ,KAAzB,EAAgCS,MAAhC,KAA2C,CAAlD;EACD;;EAEDhB,YAAY,CAACD,CAAD,EAAI;IAAE;IAChB,IAAI,KAAKlB,KAAL,CAAWC,MAAX,CAAkB,KAAKD,KAAL,CAAWM,KAA7B,EAAoCJ,OAApC,CAA4CgB,CAA5C,KAAkD,IAAtD,EAA4D;MAAE;MAC5D,IAAI,KAAKlB,KAAL,CAAWU,SAAf,EAA0B;QAAE;QAC1B,KAAK8C,SAAL,CAAetC,CAAf;QACA,KAAKe,QAAL,CAAc;UAAEzB,OAAO,EAAG,KAAKR,KAAL,CAAWQ,OAAX,KAAuB,GAAxB,GAA+B,GAA/B,GAAqC;QAAhD,CAAd,EAFwB,CAE8C;MACvE,CAHD,MAGO;QAAE;QACP,KAAKgD,SAAL,CAAetC,CAAf;QACA,KAAKc,MAAL;MACD;IACF;EACF;;EAEc,MAATwB,SAAS,CAACtC,CAAD,EAAI;IAAE;IACnB,IAAI,KAAKlB,KAAL,CAAWS,OAAX,KAAuB,KAA3B,EAAkC;MAChC,MAAMgD,MAAM,GAAG,KAAKzD,KAAL,CAAWC,MAAX,CAAkBqB,KAAlB,CAAwB,CAAxB,EAA2B,KAAKtB,KAAL,CAAWM,KAAX,GAAiB,CAA5C,CAAf,CADgC,CAC+B;;MAC/D,MAAMJ,OAAO,GAAGuD,MAAM,CAAC,KAAKzD,KAAL,CAAWM,KAAZ,CAAN,CAAyBJ,OAAzB,CAAiCoB,KAAjC,EAAhB;;MACA,IAAIpB,OAAO,CAACgB,CAAD,CAAP,IAAc,IAAlB,EAAwB;QAAE;QACxBhB,OAAO,CAACgB,CAAD,CAAP,GAAa,KAAKlB,KAAL,CAAWQ,OAAxB;QACAiD,MAAM,CAACF,IAAP,CAAY;UAAErD,OAAO,EAAEA,OAAX;UAAoB0B,IAAI,EAAEV;QAA1B,CAAZ;QACA,MAAM,KAAKe,QAAL,CAAc;UAAEhC,MAAM,EAAEwD,MAAV;UAAkBnD,KAAK,EAAE,KAAKN,KAAL,CAAWM,KAAX,GAAiB;QAA1C,CAAd,EAA6D,MAAM;UACtE,KAAKyC,aAAL,CAAmB,KAAK/C,KAAL,CAAWC,MAAX,CAAkB,KAAKD,KAAL,CAAWM,KAA7B,EAAoCJ,OAAvD,EAAgE,IAAhE;QACD,CAFI,CAAN;MAGD;IACF;EACF;;EAED8B,MAAM,GAAG;IACP,IAAI,KAAKhC,KAAL,CAAWS,OAAf,EAAwB;MAAE;MACxB,KAAKwB,QAAL,CAAc;QAAEzB,OAAO,EAAE,GAAX;QAAgBC,OAAO,EAAEiD;MAAzB,CAAd,EADsB,CAC+B;;MACrDC,MAAM,CAACC,UAAP,CAAkB,MAAM;QAAE;QACxB,IAAI,KAAK5D,KAAL,CAAWS,OAAX,KAAuB,KAA3B,EAAkC;UAChC,IAAImB,IAAI,GAAG,KAAKQ,OAAL,EAAX;UACA,KAAKoB,SAAL,CAAe5B,IAAf;;UACA,IAAI,CAAC,KAAKmB,aAAL,CAAmB,KAAK/C,KAAL,CAAWC,MAAX,CAAkB,KAAKD,KAAL,CAAWM,KAA7B,EAAoCJ,OAAvD,EAAgE,IAAhE,CAAL,EAA4E;YAC1E,KAAK+B,QAAL,CAAc;cAAExB,OAAO,EAAE,IAAX;cAAiBD,OAAO,EAAE;YAA1B,CAAd;UACD;QACF;MACF,CARD,EAQG,GARH;IASD;EACF;;EAEDuC,aAAa,CAACrB,KAAD,EAAQmC,MAAR,EAAgB;IAAE;IAC7B,IAAIC,EAAE,GAAGpC,KAAT;;IAEA,KAAK,IAAIR,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKlB,KAAL,CAAWO,IAAX,GAAgB,KAAKP,KAAL,CAAWO,IAA3B,GAAgC,CAAhD,EAAmDW,CAAC,IAAE,KAAKlB,KAAL,CAAWO,IAAjE,EAAuE;MAAE;MACvE,IAAIwD,IAAI,GAAGD,EAAE,CAAC5C,CAAD,CAAb;;MACA,IAAI6C,IAAI,KAAK,IAAb,EAAmB;QACjB,KAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKhE,KAAL,CAAWO,IAA3B,EAAiCyD,CAAC,EAAlC,EAAsC;UACpC,IAAIF,EAAE,CAAC5C,CAAC,GAAC8C,CAAH,CAAF,KAAYD,IAAhB,EAAsB;YACpBA,IAAI,GAAG,IAAP;YACA;UACD;QACF;;QACD,IAAIA,IAAI,KAAK,IAAb,EAAmB;UACjB,IAAIF,MAAJ,EAAY;YACV,KAAK5B,QAAL,CAAc;cAAEzB,OAAO,EAAEuD,IAAX;cAAiBtD,OAAO,EAAE,KAA1B;cAAiCyB,QAAQ,EAAE;YAA3C,CAAd;YACA,OAAO,IAAP;UACD,CAHD,MAGO;YACL,OAAO6B,IAAP;UACD;QACF;MACF;IACF;IACA;;;IACD,KAAK,IAAI7C,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKlB,KAAL,CAAWO,IAA3B,EAAiCW,CAAC,EAAlC,EAAsC;MACpC,IAAI6C,IAAI,GAAGD,EAAE,CAAC5C,CAAD,CAAb;;MACA,IAAI6C,IAAI,KAAK,IAAb,EAAmB;QACjB,KAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKhE,KAAL,CAAWO,IAA3B,EAAiCyD,CAAC,IAAE,CAApC,EAAuC;UACrC,IAAIF,EAAE,CAAC5C,CAAC,GAAE8C,CAAC,GAAC,KAAKhE,KAAL,CAAWO,IAAjB,CAAF,KAA8BwD,IAAlC,EAAwC;YACtCA,IAAI,GAAG,IAAP;YACA;UACD;QACF;;QACD,IAAIA,IAAI,KAAK,IAAb,EAAmB;UACjB,IAAIF,MAAJ,EAAY;YACV,KAAK5B,QAAL,CAAc;cAAEzB,OAAO,EAAEuD,IAAX;cAAiBtD,OAAO,EAAE,KAA1B;cAAiCyB,QAAQ,EAAE;YAA3C,CAAd;YACA,OAAO,IAAP;UACD,CAHD,MAGO;YACL,OAAO6B,IAAP;UACD;QACF;MACF;IACF,CAzC0B,CA2C3B;;;IACA,IAAIA,IAAI,GAAGD,EAAE,CAAC,CAAD,CAAb;;IACA,IAAIC,IAAI,KAAK,IAAb,EAAmB;MACjB,KAAK,IAAI7C,CAAC,GAAC,CAAX,EAAcA,CAAC,GAAC,KAAKlB,KAAL,CAAWO,IAAX,GAAgB,KAAKP,KAAL,CAAWO,IAA3C,EAAiDW,CAAC,IAAE,KAAKlB,KAAL,CAAWO,IAAX,GAAgB,CAApE,EAAuE;QACrE,IAAIuD,EAAE,CAAC5C,CAAD,CAAF,KAAU6C,IAAd,EAAoB;UAClBA,IAAI,GAAG,IAAP;UACA;QACD;MACF;;MACD,IAAIA,IAAI,KAAK,IAAb,EAAmB;QACjB,IAAIF,MAAJ,EAAY;UACV,KAAK5B,QAAL,CAAc;YAAEzB,OAAO,EAAEuD,IAAX;YAAiBtD,OAAO,EAAE,KAA1B;YAAiCyB,QAAQ,EAAE;UAA3C,CAAd;UACA,OAAO,IAAP;QACD,CAHD,MAGO;UACL,OAAO6B,IAAP;QACD;MACF;IACF,CA5D0B,CA8D3B;;;IACAA,IAAI,GAAGD,EAAE,CAAC,KAAK9D,KAAL,CAAWO,IAAX,GAAgB,CAAjB,CAAT;;IACA,IAAIwD,IAAI,KAAK,IAAb,EAAmB;MACjB,KAAK,IAAI7C,CAAC,GAAC,KAAKlB,KAAL,CAAWO,IAAX,GAAgB,CAA3B,EAA8BW,CAAC,GAAC,KAAKlB,KAAL,CAAWO,IAAX,GAAgB,KAAKP,KAAL,CAAWO,IAA3B,GAAgC,CAAhE,EAAmEW,CAAC,IAAE,KAAKlB,KAAL,CAAWO,IAAX,GAAgB,CAAtF,EAAyF;QACvF,IAAIuD,EAAE,CAAC5C,CAAD,CAAF,KAAU6C,IAAd,EAAoB;UAClBA,IAAI,GAAG,IAAP;UACA;QACD;MACF;;MACD,IAAIA,IAAI,KAAK,IAAb,EAAmB;QACjB,IAAIF,MAAJ,EAAY;UACV,KAAK5B,QAAL,CAAc;YAAEzB,OAAO,EAAEuD,IAAX;YAAiBtD,OAAO,EAAE,KAA1B;YAAiCyB,QAAQ,EAAE;UAA3C,CAAd;UACA,OAAO,IAAP;QACD,CAHD,MAGO;UACL,OAAO6B,IAAP;QACD;MACF;IACF;;IAED,IAAIE,GAAG,GAAG,IAAV,CAjF2B,CAiFX;;IAChB,KAAK,IAAIC,CAAC,GAAC,CAAX,EAAcA,CAAC,IAAE,CAAjB,EAAoBA,CAAC,EAArB,EAAyB;MACvB,IAAIJ,EAAE,CAACI,CAAD,CAAF,IAAS,IAAb,EAAmB;QACjBD,GAAG,GAAG,KAAN;QACA;MACD;IACF;;IACD,IAAIA,GAAJ,EAAS;MACP,IAAIJ,MAAJ,EAAY;QACV,KAAK5B,QAAL,CAAc;UAAEzB,OAAO,EAAE,EAAX;UAAeC,OAAO,EAAE,KAAxB;UAA+ByB,QAAQ,EAAE;QAAzC,CAAd;QACA,OAAO,IAAP;MACD,CAHD,MAGO;QACL,OAAO,EAAP;MACD;IACF;;IAED,IAAI2B,MAAJ,EAAY;MACV,OAAO,KAAP;IACD,CAFD,MAEO;MACL,OAAO,IAAP;IACD;EACF;;EAEDM,MAAM,GAAG;IAAE;IACT,IAAIC,GAAG,GAAG,EAAV;;IACA,IAAI,KAAKpE,KAAL,CAAWS,OAAX,KAAuB,KAAvB,IAAgC,KAAKT,KAAL,CAAWkC,QAAX,KAAwB,IAA5D,EAAkE;MAChE,IAAI,KAAKlC,KAAL,CAAWQ,OAAX,KAAuB,EAA3B,EAA+B;QAC7B4D,GAAG,gBAAG;UAAA,uBAAc,KAAKpE,KAAL,CAAWQ,OAAzB;QAAA;UAAA;UAAA;UAAA;QAAA,QAAN;MACD,CAFD,MAEO;QACL4D,GAAG,gBAAG;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QAAN;MACD;IACF,CAND,MAMO;MACLA,GAAG,gBAAG;QAAA,4BAAmB,KAAKpE,KAAL,CAAWQ,OAA9B;MAAA;QAAA;QAAA;QAAA;MAAA,QAAN;IACD;;IAED,oBACE;MAAK,SAAS,EAAC,UAAf;MAAA,wBACE;QAAK,SAAS,EAAC,UAAf;QAAA,wBACE;UAAI,SAAS,EAAC,aAAd;UAAA;QAAA;UAAA;UAAA;UAAA;QAAA,QADF,eAEE;UAAK,SAAS,EAAC,kBAAf;UAAA,UACI4D;QADJ;UAAA;UAAA;UAAA;QAAA,QAFF,eAKE;UAAK,SAAS,EAAC,4BAAf;UAAA,UACI,KAAKpD,WAAL,CAAiB,KAAKhB,KAAL,CAAWC,MAAX,CAAkB,KAAKD,KAAL,CAAWM,KAA7B,EAAoCJ,OAArD;QADJ;UAAA;UAAA;UAAA;QAAA,QALF;MAAA;QAAA;QAAA;QAAA;MAAA,QADF,eAUE;QAAK,SAAS,EAAC,UAAf;QAAA,wBACE;UAAK,SAAS,EAAC,sBAAf;UAAA,uBACE;YAAI,SAAS,EAAC,aAAd;YAAA,UACI,KAAKW,eAAL;UADJ;YAAA;YAAA;YAAA;UAAA;QADF;UAAA;UAAA;UAAA;QAAA,QADF,eAME;UAAK,SAAS,EAAC,sBAAf;UAAA,wBACE;YAAM,SAAS,EAAC,aAAhB;YAAA,wBACE;cAAO,IAAI,EAAC,UAAZ;cAAuB,IAAI,EAAC,QAA5B;cAAqC,EAAE,EAAC,WAAxC;cAAoD,QAAQ,EAAE,MAAM,KAAKkB,QAAL;YAApE;cAAA;cAAA;cAAA;YAAA,QADF,eAEE;cAAM,SAAS,EAAC;YAAhB;cAAA;cAAA;cAAA;YAAA,QAFF;UAAA;YAAA;YAAA;YAAA;UAAA,QADF,eAKE;YAAI,SAAS,EAAC,aAAd;YAAA,uBACE;cAAO,OAAO,EAAC,WAAf;cAAA;YAAA;cAAA;cAAA;cAAA;YAAA;UADF;YAAA;YAAA;YAAA;UAAA,QALF;QAAA;UAAA;UAAA;UAAA;QAAA,QANF,eAeE;UAAK,SAAS,EAAC,iBAAf;UAAA,wBACE;YAAI,SAAS,EAAC,aAAd;YAAA;UAAA;YAAA;YAAA;YAAA;UAAA,QADF,eAEE;YAAA,wBACE;cAAA,UACI,KAAKpB,iBAAL;YADJ,GAAQ,IAAR;cAAA;cAAA;cAAA;YAAA,QADF,EAII,KAAKS,aAAL,EAJJ;UAAA;YAAA;YAAA;YAAA;UAAA,QAFF;QAAA;UAAA;UAAA;UAAA;QAAA,QAfF;MAAA;QAAA;QAAA;QAAA;MAAA,QAVF;IAAA;MAAA;MAAA;MAAA;IAAA,QADF;EAsCD;;AAjWgC;;AAoWnC3B,QAAQ,CAAC0E,MAAT,eAAgB,QAAC,IAAD;EAAA;EAAA;EAAA;AAAA,QAAhB,EAA0BE,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAA1B"},"metadata":{},"sourceType":"module"}